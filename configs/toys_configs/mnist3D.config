from lightning import Trainer
from diffusion4med.data.toys_datasets.mnist3D.dataset import Mnist3d
from diffusion4med.models.diffusion.architecture import (
    FPN3d,
    HeadFPN3d,
    UnionArchitecture,
)
from diffusion4med.models.diffusion.diffusion import Diffusion
from diffusion4med.models.diffusion.schedulers import CosineSheduler
import torch.nn.functional as F
from torch.utils.data import DataLoader
from functools import partial
from thunder.callbacks import TimeProfiler, MetricLogger
from lightning.pytorch.callbacks import ModelCheckpoint, LearningRateMonitor
from lightning.pytorch.loggers import WandbLogger
from torch.optim import Adam
from thunder.policy import Switch

path_to_data = "/shared/data/mnist3d/full_dataset_vectors.h5"
BATCH_SIZE = 128
train_data = DataLoader(Mnist3d(path_to_data), batch_size=BATCH_SIZE)

timesteps = 1000
channels = (16, 32, 64, 128)
in_channels = 1
image_shape = (1, 16, 16, 16)

backbone = partial(
    FPN3d, in_channels=in_channels, timesteps=timesteps, channels=channels
)
head = partial(HeadFPN3d, in_channels=channels[0], out_channels=in_channels)
architecture = UnionArchitecture(backbone, head)
module = Diffusion(
    timesteps=timesteps,
    scheduler=CosineSheduler,
    architecture=architecture,
    criterion=F.smooth_l1_loss,
    optimizer=Adam(architecture.parameters(), lr=1e-3),
    lr_scheduler=Switch({0: 1e-3, 90: 1e-4}),
    image_shape=image_shape,
)


wandb_logger = WandbLogger(name="first_iteration", project="mnist3D")

trainer = Trainer(
    callbacks=[
        ModelCheckpoint(save_last=True),
        TimeProfiler(),
        LearningRateMonitor("epoch"),
        MetricLogger(),
    ],
    accelerator="gpu",
    devices=1,
    max_epochs=10000,
    logger=wandb_logger,
    n_val_step=1,
    limit_val_batches=1,
)
