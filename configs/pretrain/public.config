from diffusion4med.models.diffusion import (
    FPN3d,
    HeadFPN3d,
    WeightStandardizedFPN3d,
    WeightStandardizedHeadFPN3d,
    Diffusion,
    CosineSheduler,
)
import torch.nn.functional as F
from torch.utils.data import DataLoader, RandomSampler
from thunder.callbacks import TimeProfiler, MetricLogger
from lightning.pytorch.callbacks import ModelCheckpoint, LearningRateMonitor
# from thunder.torch.loggers import WandbLogger
from lightning.pytorch.loggers import WandbLogger
from thunder.policy import Switch
from thunder.placeholders import GroupName
from diffusion4med.utils import ValVisualization
from lightning import Trainer
from diffusion4med.data.pretrain.public import ModifiedPublic
from vox2vec.nn.diffusions.diffusion import Unet, DiffusionHead
from thunder.layout import SingleSplit
from lightning.pytorch.strategies.deepspeed import DeepSpeedStrategy

SPACING = 1.0, 1.0, 2.0
PATCH_SIZE = 128, 128, 32
WINDOW_HU = -1350, 1000
BATCH_SIZE = 1
NUM_BATCHES_PER_EPOCH = 100
NUM_WORKERS = 4
VAL_RATIO = 0.001
RANDOM_STATE = 43
strategy = "deepspeed_stage_3" 

pretrain_dataset = ModifiedPublic(
    spacing=SPACING, patch_size=PATCH_SIZE, window_hu=WINDOW_HU
)
split_dataset = SingleSplit(
    pretrain_dataset, val=VAL_RATIO, train=1 - VAL_RATIO, random_state=RANDOM_STATE
)
pretrain_sampler = RandomSampler(
    split_dataset.train,
    replacement=True,
    num_samples=NUM_BATCHES_PER_EPOCH * BATCH_SIZE,
)
train_data = DataLoader(
    split_dataset.train,
    batch_size=BATCH_SIZE,
    sampler=pretrain_sampler,
    num_workers=NUM_WORKERS,
    prefetch_factor=50,
)
val_data = DataLoader(split_dataset.val, batch_size=1, num_workers=NUM_WORKERS)


timesteps = 300
channels = (32, 64, 128, 256, 512, 1024)
in_channels = 1
num_log_images = 10
slice_visualize = PATCH_SIZE[-1] // 2
image_shape = (1, *PATCH_SIZE)
n_block = 20
num_blocks = (
    (n_block, n_block),
    (n_block, n_block),
    (n_block, n_block),
    (n_block, n_block),
    (n_block, n_block),
)

loss = F.smooth_l1_loss
backbone = FPN3d(
    in_channels=in_channels,
    timesteps=timesteps,
    channels=channels,
    num_blocks=num_blocks,
)
# backbone = Unet(dim = 16, dim_mults=channels)
head = HeadFPN3d(in_channels=channels[0], out_channels=in_channels)
# head = DiffusionHead(in_channels=16)
module = Diffusion(
    backbone=backbone,
    head=head,
    timesteps=timesteps,
    scheduler=CosineSheduler,
    num_log_images=num_log_images,
    slice_visualize=slice_visualize,
    criterion=loss,
    lr=1e-4,
    lr_scheduler = Switch({0: 1e-4, 75: 1e-5}),
    image_shape=image_shape,
)

wandb_logger = WandbLogger(name=GroupName, project="Public")

trainer = Trainer(
    callbacks=[
        ModelCheckpoint(save_last=True),
        TimeProfiler(),
        LearningRateMonitor("epoch"),
        MetricLogger(single_metrics={"loss": loss}),
        ValVisualization(),
    ],
    accelerator="gpu",
    devices=1,
    precision = "16",
    max_epochs=10000,
    limit_val_batches=min(10, len(split_dataset.val)),
    check_val_every_n_epoch=15,
    logger=wandb_logger,
    num_sanity_val_steps=0,
    # strategy=strategy,
)
