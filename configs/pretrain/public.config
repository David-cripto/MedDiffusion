from diffusion4med.models.diffusion import (
    FPN3d,
    HeadFPN3d,
    WeightStandardizedFPN3d,
    WeightStandardizedHeadFPN3d,
    UnionArchitecture,
    Diffusion,
    CosineSheduler,
)
from functools import partial
import torch.nn.functional as F
from torch.utils.data import DataLoader, RandomSampler
from thunder.callbacks import TimeProfiler, MetricLogger
from lightning.pytorch.callbacks import ModelCheckpoint, LearningRateMonitor
from lightning.pytorch.loggers import WandbLogger
from torch.optim import Adam
from thunder.policy import Switch
from thunder.placeholders import GroupName
from diffusion4med.utils import ValVisulization
from lightning import Trainer
from diffusion4med.data.pretrain.public import ModifiedPublic

SPACING = 1.0, 1.0, 2.0
PATCH_SIZE = 128, 128, 32
WINDOW_HU = -1350, 1000
BATCH_SIZE = 3
NUM_BATCHES_PER_EPOCH = 100
NUM_WORKERS = 4

pretrain_dataset = ModifiedPublic(
    spacing=SPACING, patch_size=PATCH_SIZE, window_hu=WINDOW_HU
)
pretrain_sampler = RandomSampler(
    pretrain_dataset, replacement=True, num_samples=NUM_BATCHES_PER_EPOCH * BATCH_SIZE
)
train_data = DataLoader(
    pretrain_dataset,
    batch_size=BATCH_SIZE,
    sampler=pretrain_sampler,
    num_workers=NUM_WORKERS,
    prefetch_factor=50,
)
val_data = DataLoader(pretrain_dataset, batch_size=1, num_workers=NUM_WORKERS)

timesteps = 1000
channels = (16, 32, 64, 128, 256, 512)
in_channels = 1
num_log_images = 10
slice_visualize = PATCH_SIZE[-1] // 2
image_shape = (1, *PATCH_SIZE)
n_block = 1
num_blocks = (
    (n_block, n_block),
    (n_block, n_block),
    (n_block, n_block),
    (n_block, n_block),
    (n_block, n_block),
)

loss = F.smooth_l1_loss
backbone = partial(
    FPN3d,
    in_channels=in_channels,
    timesteps=timesteps,
    channels=channels,
    num_blocks=num_blocks,
)
head = partial(HeadFPN3d, in_channels=channels[0], out_channels=in_channels)
architecture = UnionArchitecture(backbone, head)
module = Diffusion(
    timesteps=timesteps,
    scheduler=CosineSheduler,
    architecture=architecture,
    num_log_images=num_log_images,
    slice_visualize=slice_visualize,
    criterion=loss,
    optimizer=Adam(architecture.parameters()),
    lr_scheduler=Switch({0: 1e-3, 20: 1e-4, 150: 1e-5}),
    image_shape=image_shape,
)

wandb_logger = WandbLogger(name=GroupName, project="Public")

trainer = Trainer(
    callbacks=[
        ModelCheckpoint(save_last=True),
        TimeProfiler(),
        LearningRateMonitor("epoch"),
        MetricLogger(single_metrics={"loss": loss}),
        ValVisulization(),
    ],
    accelerator="gpu",
    devices=1,
    max_epochs=10000,
    limit_val_batches=10,
    check_val_every_n_epoch=10,
    logger=wandb_logger,
)
