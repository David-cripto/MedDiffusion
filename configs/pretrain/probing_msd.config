from diffusion4med.models.diffusion.inference import ProbingModified, Backbone
from diffusion4med.models.diffusion import (
    FPN3d,
    Diffusion,
    CosineSheduler,
    LinearAttention,
    QuadraticAttention,
)
from thunder.placeholders import GroupName
from thunder.torch.loggers import WandbLogger
from lightning import Trainer
from thunder.callbacks import TimeProfiler
from lightning.pytorch.callbacks import ModelCheckpoint, LearningRateMonitor
from ira.nets.fpn import FPNSegmentationHead
from vox2vec.eval.data.msd.datamodule import MSDCTDataModule


SPACING = 1.0, 1.0, 2.0
PATCH_SIZE = 128, 128, 32
WINDOW_HU = -1350, 1000
BATCH_SIZE = 1
NUM_BATCHES_PER_EPOCH = 1000
NUM_WORKERS = 4
SPLIT = 0
TASK = "Task07_Pancreas"
NUM_CLASSES=3

msd_data = MSDCTDataModule(
    root="/shared/data/msd",
    task=TASK,
    spacing=SPACING,
    window_hu=WINDOW_HU,
    patch_size=PATCH_SIZE,
    batch_size=BATCH_SIZE,
    num_batches_per_epoch=NUM_BATCHES_PER_EPOCH,
    num_workers=NUM_WORKERS,
    split_idx=SPLIT,
)

train_data = msd_data.train_dataloader()
val_data = msd_data.val_dataloader()
test_data = msd_data.test_dataloader()

timesteps = 300
channels = (32, 64, 128, 256, 512, 1024)
times = [10,30,60]
in_channels = 1
path_to_ckpt = "/shared/experiments/diffusion/kek/public/Attention_Huge_MedDiffusion/Public/cdm286h2/checkpoints/last.ckpt"
num_blocks = ((1, 1), (4, 4), (6, 6), (8, 8), (12, 12))
attention_types = (
    (LinearAttention, LinearAttention),
    (LinearAttention, LinearAttention),
    (LinearAttention, LinearAttention),
    (LinearAttention, LinearAttention),
    (QuadraticAttention, QuadraticAttention),
)


model = FPN3d(
    in_channels=in_channels,
    timesteps=timesteps,
    channels=channels,
    num_blocks=num_blocks,
    attention_types=attention_types,
)

diffusion = Diffusion(
    backbone=model,
    head=None,
    timesteps=timesteps,
    scheduler=CosineSheduler,
    num_log_images=10,
    slice_visualize=None,
    criterion=None,
    lr=None,
    image_shape=(1, *PATCH_SIZE),
)

backbone = Backbone(diffusion, times=times, path_to_ckpt=path_to_ckpt)
head = FPNSegmentationHead(
    num_classes=NUM_CLASSES, channels=tuple(c * len(times) for c in channels)
)
module = ProbingModified(backbone, head, patch_size=PATCH_SIZE, lr = 3e-4, sw_batch_size=1)

wandb_logger = WandbLogger(
    name=GroupName, project="Public", remove_dead_duplicates=True
)

trainer = Trainer(
    callbacks=[
        ModelCheckpoint(save_last=True),
        TimeProfiler(),
        LearningRateMonitor("epoch"),
    ],
    accelerator="gpu",
    devices=1,
    max_epochs=47,
    logger=wandb_logger,
    # num_sanity_val_steps=0,
)
